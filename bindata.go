// Code generated by go-bindata.
// sources:
// pieces.png
// tile.png
// selecttile.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _piecesPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x09\x40\xac\xc0\xc1\x06\x24\xdf\x1e\xa8\x0d\x61\x60\x60\x2c\xf2\x74\x71\x0c\xa9\xb8\xf5\x76\xe6\x45\xbe\x56\x05\x8e\xb6\xca\xc3\xf7\xfe\x67\x5a\x85\xe7\xba\xae\x9b\xc0\xff\x71\x47\xc2\xe7\x45\x67\xe3\x3b\xe2\x05\x5c\x97\x3c\x11\xde\xb4\xfa\x62\xb3\xa0\xfa\xb1\x4f\x77\x77\xcf\x7b\xbe\x3f\x78\xee\xb5\x23\xd9\x86\x6b\x96\x3f\x8f\xcc\xb5\x78\xbc\xc5\xae\xfb\x5d\xf7\xb9\xb6\xbd\x72\x4c\xb5\xe7\xca\x2d\xde\x0a\xbe\x57\x7c\x30\xe3\xf6\xc2\xfa\xfa\xc9\xe6\x4c\xe7\x5a\x5e\x5e\x4c\x66\xbf\x7b\xa0\x85\xe1\x55\x4b\xe2\x2f\xcd\x4e\x3e\xf7\x65\xee\x0e\xdc\x8f\xe3\xb8\xdf\x2c\x90\x7d\x77\x88\xe3\xb9\xbf\x35\x73\x5e\xe5\xe4\x49\x2f\x15\x1b\x5c\x2e\x9c\x3e\x61\xe5\xac\xaa\xf5\xa5\x40\xcb\x53\x4d\x41\x8b\x29\xe3\xcb\x07\xd6\x45\x45\x95\x82\x0f\xce\xd4\x7f\x50\x58\x2c\x28\x31\xd3\x6e\xd3\xc7\xe4\x53\x01\x41\x27\x75\x42\x58\x1f\x6a\x75\xc9\x39\x5d\x96\x75\x78\x3b\xbf\x93\x7f\xe7\x09\x91\x7b\xf5\xec\x5a\xec\xe7\xd4\x0e\x58\x70\xd9\xb3\xc5\x07\x05\x19\xb9\xac\x92\x9f\xf0\x43\xac\xe4\x70\xfe\xed\x32\xc9\x69\xd7\x03\x4c\xcf\xc7\x30\xcd\x2b\x88\x9a\xef\xfa\xdd\x35\xfd\xf0\xbd\x3d\x75\x0d\x87\x33\xfb\x2b\xf8\x19\x8f\xdf\xe1\xfb\xdb\x5f\xa5\xcb\x32\x87\xf3\xf2\xe2\xe3\x7c\xbb\x1a\x39\x19\xaf\x70\x1e\xfe\x12\x2c\xa4\xba\x59\x5e\x20\xd1\xc6\xc3\xd1\x84\xf5\xd1\xf6\x39\x0c\xc8\x2e\x9c\xf0\xc7\xdb\x5e\x41\x03\x87\x03\x77\x94\xd9\x27\xb8\x48\x7a\x69\xcd\x6c\x5d\xa5\x10\xe3\xfa\xf0\xfb\x87\x9b\x7c\x13\xa6\xfe\x66\x14\x14\x9f\x79\xe8\xf7\x7b\x87\xa7\x07\x6e\xb2\x78\xec\x7d\x1e\x6e\xff\xc0\xfb\x13\xf3\x97\xa9\x33\x96\x76\xec\x38\xf4\x0f\x18\x09\x0c\x9e\xae\x7e\x2e\xeb\x9c\x12\x9a\x00\x01\x00\x00\xff\xff\x49\xdb\xaf\x7e\xab\x01\x00\x00")

func piecesPngBytes() ([]byte, error) {
	return bindataRead(
		_piecesPng,
		"pieces.png",
	)
}

func piecesPng() (*asset, error) {
	bytes, err := piecesPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pieces.png", size: 427, mode: os.FileMode(438), modTime: time.Unix(1485207406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tilePng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x02\x20\xcc\xc1\x06\x24\xe5\x3f\xff\x4f\x04\x52\xea\x9e\x2e\x8e\x21\x15\xb7\x92\x13\x12\x12\x7e\xf0\x33\xa5\x5c\xfe\xaf\xc9\xa0\xe0\x2c\x91\xa0\x36\x31\xf7\xc4\x0a\x6e\xb7\x58\x83\x57\x4c\x2d\xdc\x1a\x27\x2f\x31\xf0\x9c\x5e\xd4\x31\x57\x4a\xaa\x1a\xa8\x85\xc1\xd3\xd5\xcf\x65\x9d\x53\x42\x13\x20\x00\x00\xff\xff\x89\x0e\x2a\x01\x60\x00\x00\x00")

func tilePngBytes() ([]byte, error) {
	return bindataRead(
		_tilePng,
		"tile.png",
	)
}

func tilePng() (*asset, error) {
	bytes, err := tilePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tile.png", size: 96, mode: os.FileMode(438), modTime: time.Unix(1485207406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _selecttilePng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x02\xd2\x02\x20\xcc\xc1\x06\x24\xe5\x3f\xff\x4f\x04\x51\x9e\x2e\x8e\x21\x15\xb7\x92\x13\x12\x12\x7e\xf0\x33\xa5\x5c\x16\xc9\x64\xbb\xc4\xb3\x58\x4f\xa2\xf4\xe0\x0a\x6e\xb6\x4e\x6e\x86\x9a\x45\xb5\xf3\x23\x1c\xe5\xd6\x02\x95\x32\x78\xba\xfa\xb9\xac\x73\x4a\x68\x02\x04\x00\x00\xff\xff\x33\xb5\xba\xfb\x58\x00\x00\x00")

func selecttilePngBytes() ([]byte, error) {
	return bindataRead(
		_selecttilePng,
		"selecttile.png",
	)
}

func selecttilePng() (*asset, error) {
	bytes, err := selecttilePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "selecttile.png", size: 88, mode: os.FileMode(438), modTime: time.Unix(1485222610, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pieces.png": piecesPng,
	"tile.png": tilePng,
	"selecttile.png": selecttilePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pieces.png": &bintree{piecesPng, map[string]*bintree{}},
	"selecttile.png": &bintree{selecttilePng, map[string]*bintree{}},
	"tile.png": &bintree{tilePng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

