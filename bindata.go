// Code generated by go-bindata.
// sources:
// pieces.png
// tile.png
// selecttile.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _piecesPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x48\x60\x60\x60\x50\xe0\x60\x63\x60\x60\x78\x7b\xa0\x36\x84\x81\x81\xb1\xc8\xd3\xc5\x31\xa4\xe2\xd6\xdb\x99\x17\xf9\x5a\x15\x38\xda\x2a\x0f\xdf\xfb\x9f\x69\x15\x9e\xeb\xba\x6e\x02\xff\xc7\x1d\x09\x9f\x17\x9d\x8d\xef\x88\x17\x70\x5d\xf2\x44\x78\xd3\xea\x8b\xcd\x82\xea\xc7\x3e\xdd\xdd\x3d\xef\xf9\xfe\xe0\xb9\xd7\x8e\x64\x1b\xae\x59\xfe\x3c\x32\xd7\xe2\xf1\x16\xbb\xee\x77\xdd\xe7\xda\xf6\xca\x31\xd5\x9e\x2b\xb7\x78\x2b\xf8\x5e\xf1\xc1\x8c\xdb\x0b\xeb\xeb\x27\x9b\x33\x9d\x6b\x79\x79\x31\x99\xfd\xee\x81\x16\x86\x57\x2d\x89\xbf\x34\x3b\xf9\xdc\x97\xb9\x3b\x70\x3f\x8e\xe3\x7e\xb3\x40\xf6\xdd\x21\x8e\xe7\xfe\xd6\xcc\x79\x95\x93\x27\xbd\x54\x6c\x70\xb9\x70\xfa\x84\x95\xb3\xaa\xd6\x97\x02\x2d\x4f\x35\x05\x2d\xa6\x8c\x2f\x1f\x58\x17\x15\x55\x0a\x3e\x38\x53\xff\x41\x61\xb1\xa0\xc4\x4c\xbb\x4d\x1f\x93\x4f\x05\x04\x9d\xd4\x09\x61\x7d\xa8\xd5\x25\xe7\x74\x59\xd6\xe1\xed\xfc\x4e\xfe\x9d\x27\x44\xee\xd5\xb3\x6b\xb1\x9f\x53\x3b\x60\xc1\x65\xcf\x16\x1f\x14\x64\xe4\xb2\x4a\x7e\xc2\x0f\xb1\x92\xc3\xf9\xb7\xcb\x24\xa7\x5d\x0f\x30\x3d\x1f\xc3\x34\xaf\x20\x6a\xbe\xeb\x77\xd7\xf4\xc3\xf7\xf6\xd4\x35\x1c\xce\xec\xaf\xe0\x67\x3c\x7e\x87\xef\x6f\x7f\x95\x2e\xcb\x1c\xce\xcb\x8b\x8f\xf3\xed\x6a\xe4\x64\xbc\xc2\x79\xf8\x4b\xb0\x90\xea\x66\x79\x81\x44\x1b\x0f\x47\x13\xd6\x47\xdb\xe7\x30\x20\xbb\x70\xc2\x1f\x6f\x7b\x05\x0d\x1c\x0e\xdc\x51\x66\x9f\xe0\x22\xe9\xa5\x35\xb3\x75\x95\x42\x8c\xeb\xc3\xef\x1f\x6e\xf2\x4d\x98\xfa\x9b\x51\x50\x7c\xe6\xa1\xdf\xef\x1d\x9e\x1e\xb8\xc9\xe2\xb1\xf7\x79\xb8\xfd\x03\xef\x4f\xcc\x5f\xa6\xce\x58\xda\xb1\xe3\xd0\x3f\x06\x06\x06\x06\x4f\x57\x3f\x97\x75\x4e\x09\x4d\x80\x00\x00\x00\xff\xff\x49\xdb\xaf\x7e\xab\x01\x00\x00")

func piecesPngBytes() ([]byte, error) {
	return bindataRead(
		_piecesPng,
		"pieces.png",
	)
}

func piecesPng() (*asset, error) {
	bytes, err := piecesPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pieces.png", size: 427, mode: os.FileMode(438), modTime: time.Unix(1616475696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tilePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x00\x61\x0e\x36\x06\x06\x06\xf9\xcf\xff\x13\x19\x18\x18\xd4\x3d\x5d\x1c\x43\x2a\x6e\x25\x27\x24\x24\xfc\xe0\x67\x4a\xb9\xfc\x5f\x93\x41\xc1\x59\x22\x41\x6d\x62\xee\x89\x15\xdc\x6e\xb1\x06\xaf\x98\x5a\xb8\x35\x4e\x5e\x62\xe0\x39\xbd\xa8\x63\xae\x94\x54\x35\x03\x03\x03\x83\xa7\xab\x9f\xcb\x3a\xa7\x84\x26\x40\x00\x00\x00\xff\xff\x89\x0e\x2a\x01\x60\x00\x00\x00")

func tilePngBytes() ([]byte, error) {
	return bindataRead(
		_tilePng,
		"tile.png",
	)
}

func tilePng() (*asset, error) {
	bytes, err := tilePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tile.png", size: 96, mode: os.FileMode(438), modTime: time.Unix(1616475696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _selecttilePng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x00\x61\x0e\x36\x06\x06\x06\xf9\xcf\xff\x13\x41\x94\xa7\x8b\x63\x48\xc5\xad\xe4\x84\x84\x84\x1f\xfc\x4c\x29\x97\x45\x32\xd9\x2e\xf1\x2c\xd6\x93\x28\x3d\xb8\x82\x9b\xad\x93\x9b\xa1\x66\x51\xed\xfc\x08\x47\xb9\xb5\x0c\x0c\x0c\x0c\x9e\xae\x7e\x2e\xeb\x9c\x12\x9a\x00\x01\x00\x00\xff\xff\x33\xb5\xba\xfb\x58\x00\x00\x00")

func selecttilePngBytes() ([]byte, error) {
	return bindataRead(
		_selecttilePng,
		"selecttile.png",
	)
}

func selecttilePng() (*asset, error) {
	bytes, err := selecttilePngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "selecttile.png", size: 88, mode: os.FileMode(438), modTime: time.Unix(1616475696, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pieces.png": piecesPng,
	"tile.png": tilePng,
	"selecttile.png": selecttilePng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pieces.png": &bintree{piecesPng, map[string]*bintree{}},
	"selecttile.png": &bintree{selecttilePng, map[string]*bintree{}},
	"tile.png": &bintree{tilePng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

